{:use-macros {infix infix.macros}, :excludes #{}, :name generative.graphics, :imports nil, :requires {rum rum.core, rum.core rum.core, pprint cljs.pprint, cljs.pprint cljs.pprint, gcompute generative.compute, generative.compute generative.compute}, :uses nil, :defs {inv-initial-radius {:name generative.graphics/inv-initial-radius, :file "C:\\dev\\generative\\src\\generative\\graphics.cljs", :line 11, :column 1, :end-line 11, :end-column 24, :meta {:file "C:\\dev\\generative\\src\\generative\\graphics.cljs", :line 11, :column 6, :end-line 11, :end-column 24}}, line-alpha-multiplier {:name generative.graphics/line-alpha-multiplier, :file "C:\\dev\\generative\\src\\generative\\graphics.cljs", :line 12, :column 1, :end-line 12, :end-column 27, :meta {:file "C:\\dev\\generative\\src\\generative\\graphics.cljs", :line 12, :column 6, :end-line 12, :end-column 27}}, rgb {:protocol-inline nil, :meta {:file "C:\\dev\\generative\\src\\generative\\graphics.cljs", :line 14, :column 7, :end-line 14, :end-column 10, :arglists (quote ([red green blue]))}, :name generative.graphics/rgb, :variadic false, :file "C:\\dev\\generative\\src\\generative\\graphics.cljs", :end-column 10, :method-params ([red green blue]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 3, :fn-var true, :arglists (quote ([red green blue]))}, render-graphics {:protocol-inline nil, :meta {:file "C:\\dev\\generative\\src\\generative\\graphics.cljs", :line 22, :column 7, :end-line 22, :end-column 22, :arglists (quote ([stage width height]))}, :name generative.graphics/render-graphics, :variadic false, :file "C:\\dev\\generative\\src\\generative\\graphics.cljs", :end-column 22, :method-params ([stage width height]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 3, :fn-var true, :arglists (quote ([stage width height]))}, animate {:protocol-inline nil, :meta {:file "C:\\dev\\generative\\src\\generative\\graphics.cljs", :line 68, :column 7, :end-line 68, :end-column 14, :arglists (quote ([state]))}, :name generative.graphics/animate, :variadic false, :file "C:\\dev\\generative\\src\\generative\\graphics.cljs", :end-column 14, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 68, :end-line 68, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, attach-pixi-canvas {:name generative.graphics/attach-pixi-canvas, :file "C:\\dev\\generative\\src\\generative\\graphics.cljs", :line 80, :column 1, :end-line 80, :end-column 24, :meta {:file "C:\\dev\\generative\\src\\generative\\graphics.cljs", :line 80, :column 6, :end-line 80, :end-column 24}}, show-graphics {:name generative.graphics/show-graphics, :file "C:\\dev\\generative\\src\\generative\\graphics.cljs", :line 100, :column 1, :end-line 101, :end-column 16, :arglists (quote ([app-state app-dispatch])), :meta {:file "C:\\dev\\generative\\src\\generative\\graphics.cljs", :line 101, :column 3, :end-line 101, :end-column 16, :arglists (quote ([app-state app-dispatch]))}}}, :require-macros {infix.macros infix.macros, rum rum.core, rum.core rum.core, pprint cljs.pprint, cljs.pprint cljs.pprint}, :cljs.analyzer/constants {:seen #{:path :rum/react-component :did-mount :will-unmount :assoc-once :initial-radius :type :ui-cache :generative.graphics/pixi-renderer :did-update :generative.graphics/pixi-stage :generative.graphics/pixi-view :graphics :generative.graphics/mounted? :pixi-renderer :data}, :order [:initial-radius :generative.graphics/pixi-renderer :generative.graphics/pixi-stage :generative.graphics/mounted? :did-mount :will-unmount :did-update :rum/react-component :generative.graphics/pixi-view :graphics :ui-cache :pixi-renderer :path :type :data :assoc-once]}, :doc nil}
{:use-macros {infix infix.macros}, :excludes #{}, :name generative.compute, :imports nil, :requires {pprint cljs.pprint, cljs.pprint cljs.pprint}, :uses nil, :defs {Settings {:num-fields 6, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name generative.compute/Settings, :file "src\\generative\\compute.cljs", :end-column 20, :type true, :column 12, :internal-ctor true, :line 7, :record true, :end-line 7, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ->Settings {:protocol-inline nil, :meta {:file "C:\\dev\\generative\\src\\generative\\compute.cljs", :line 7, :column 12, :end-line 7, :end-column 20, :internal-ctor true, :factory :positional, :arglists (quote ([decay angle-divisor branch-factor initial-radius initial-branch-count max-branch-count]))}, :name generative.compute/->Settings, :variadic false, :file "src\\generative\\compute.cljs", :end-column 20, :method-params ([decay angle-divisor branch-factor initial-radius initial-branch-count max-branch-count]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 7, :end-line 7, :max-fixed-arity 6, :fn-var true, :arglists (quote ([decay angle-divisor branch-factor initial-radius initial-branch-count max-branch-count]))}, map->Settings {:protocol-inline nil, :meta {:file "C:\\dev\\generative\\src\\generative\\compute.cljs", :line 7, :column 12, :end-line 7, :end-column 20, :internal-ctor true, :factory :map, :arglists (quote ([G__24969]))}, :name generative.compute/map->Settings, :variadic false, :file "src\\generative\\compute.cljs", :end-column 20, :method-params ([G__24969]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__24969]))}, default-settings {:name generative.compute/default-settings, :file "src\\generative\\compute.cljs", :line 15, :column 1, :end-line 15, :end-column 22, :meta {:file "C:\\dev\\generative\\src\\generative\\compute.cljs", :line 15, :column 6, :end-line 15, :end-column 22}}, Branch {:num-fields 8, :protocols #{}, :name generative.compute/Branch, :file "src\\generative\\compute.cljs", :end-column 16, :type true, :column 10, :line 25, :record false, :end-line 25, :skip-protocol-flag nil}, ->Branch {:protocol-inline nil, :meta {:file "C:\\dev\\generative\\src\\generative\\compute.cljs", :line 25, :column 10, :end-line 25, :end-column 16, :protocols #{}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([x y z radius angle1 angle2 depth parent]))}, :protocols #{}, :name generative.compute/->Branch, :variadic false, :file "src\\generative\\compute.cljs", :end-column 16, :method-params ([x y z radius angle1 angle2 depth parent]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 25, :end-line 25, :max-fixed-arity 8, :fn-var true, :arglists (quote ([x y z radius angle1 angle2 depth parent])), :skip-protocol-flag nil}, compute-next {:protocol-inline nil, :meta {:file "C:\\dev\\generative\\src\\generative\\compute.cljs", :line 27, :column 7, :end-line 27, :end-column 19, :arglists (quote ([settings x y z radius angle1 angle2 depth parent]))}, :name generative.compute/compute-next, :variadic false, :file "src\\generative\\compute.cljs", :end-column 19, :method-params ([settings x y z radius angle1 angle2 depth parent]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 9, :fn-var true, :arglists (quote ([settings x y z radius angle1 angle2 depth parent]))}, compute-next2 {:protocol-inline nil, :meta {:file "C:\\dev\\generative\\src\\generative\\compute.cljs", :line 44, :column 7, :end-line 44, :end-column 20, :arglists (quote ([settings active x y z radius angle1 angle2 depth parent]))}, :name generative.compute/compute-next2, :variadic false, :file "src\\generative\\compute.cljs", :end-column 20, :method-params ([settings active x y z radius angle1 angle2 depth parent]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 44, :end-line 44, :max-fixed-arity 10, :fn-var true, :arglists (quote ([settings active x y z radius angle1 angle2 depth parent]))}, compute {:protocol-inline nil, :meta {:file "C:\\dev\\generative\\src\\generative\\compute.cljs", :line 63, :column 7, :end-line 63, :end-column 14, :arglists (quote ([settings]))}, :name generative.compute/compute, :variadic false, :file "src\\generative\\compute.cljs", :end-column 14, :method-params ([settings]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 1, :fn-var true, :arglists (quote ([settings]))}}, :require-macros {infix.macros infix.macros, pprint cljs.pprint, cljs.pprint cljs.pprint}, :cljs.analyzer/constants {:seen #{x :angle-divisor y angle-divisor :initial-radius parent :initial-branch-count :branch-factor initial-radius radius :z-enabled initial-branch-count :max-branch-count :decay z branch-factor angle1 angle2 max-branch-count depth decay}, :order [:decay :angle-divisor :branch-factor :initial-radius :initial-branch-count :max-branch-count decay angle-divisor branch-factor initial-radius initial-branch-count max-branch-count :z-enabled x y z radius angle1 angle2 depth parent]}, :doc nil}
{:use-macros {infix infix.macros}, :excludes #{}, :name generative.three, :imports nil, :requires {rum rum.core, rum.core rum.core, pprint cljs.pprint, cljs.pprint cljs.pprint, compute generative.compute, generative.compute generative.compute}, :uses nil, :defs {animate {:protocol-inline nil, :meta {:file "C:\\dev\\generative\\src\\generative\\three.cljs", :line 9, :column 7, :end-line 9, :end-column 14, :arglists (quote ([state]))}, :name generative.three/animate, :variadic false, :file "C:\\dev\\generative\\src\\generative\\three.cljs", :end-column 14, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, attach-three-canvas {:name generative.three/attach-three-canvas, :file "C:\\dev\\generative\\src\\generative\\three.cljs", :line 23, :column 1, :end-line 23, :end-column 25, :meta {:file "C:\\dev\\generative\\src\\generative\\three.cljs", :line 23, :column 6, :end-line 23, :end-column 25}}, vertex-shader {:name generative.three/vertex-shader, :file "C:\\dev\\generative\\src\\generative\\three.cljs", :line 43, :column 1, :end-line 43, :end-column 19, :meta {:file "C:\\dev\\generative\\src\\generative\\three.cljs", :line 43, :column 6, :end-line 43, :end-column 19}}, fragment-shader {:name generative.three/fragment-shader, :file "C:\\dev\\generative\\src\\generative\\three.cljs", :line 106, :column 1, :end-line 106, :end-column 21, :meta {:file "C:\\dev\\generative\\src\\generative\\three.cljs", :line 106, :column 6, :end-line 106, :end-column 21}}, setup-geo {:protocol-inline nil, :meta {:file "C:\\dev\\generative\\src\\generative\\three.cljs", :line 121, :column 7, :end-line 121, :end-column 16, :arglists (quote ([width height data data2]))}, :name generative.three/setup-geo, :variadic false, :file "C:\\dev\\generative\\src\\generative\\three.cljs", :end-column 16, :method-params ([width height data data2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 121, :end-line 121, :max-fixed-arity 4, :fn-var true, :arglists (quote ([width height data data2]))}, generate-graphics {:protocol-inline nil, :meta {:file "C:\\dev\\generative\\src\\generative\\three.cljs", :line 246, :column 7, :end-line 246, :end-column 24, :arglists (quote ([width height parent]))}, :name generative.three/generate-graphics, :variadic false, :file "C:\\dev\\generative\\src\\generative\\three.cljs", :end-column 24, :method-params ([width height parent]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 246, :end-line 246, :max-fixed-arity 3, :fn-var true, :arglists (quote ([width height parent]))}, show-three {:name generative.three/show-three, :file "C:\\dev\\generative\\src\\generative\\three.cljs", :line 293, :column 1, :end-line 294, :end-column 13, :arglists (quote ([app-state app-dispatch])), :meta {:file "C:\\dev\\generative\\src\\generative\\three.cljs", :line 294, :column 3, :end-line 294, :end-column 13, :arglists (quote ([app-state app-dispatch]))}}}, :require-macros {infix.macros infix.macros, rum rum.core, rum.core rum.core, pprint cljs.pprint, cljs.pprint cljs.pprint}, :cljs.analyzer/constants {:seen #{:generative.three/mounted? :path :rum/react-component :did-mount :will-unmount :generative.three/generate-graphics :assoc-once :generative.three/three-renderer :uniforms :lines :type :three :generative.three/three-view :generative.three/three-camera :ui-cache :did-update :mesh :generative.three/three-scene :three-renderer :data}, :order [:generative.three/three-renderer :generative.three/three-scene :generative.three/three-camera :generative.three/generate-graphics :generative.three/mounted? :did-mount :will-unmount :did-update :rum/react-component :generative.three/three-view :lines :mesh :uniforms :three :ui-cache :three-renderer :path :type :data :assoc-once]}, :doc nil}